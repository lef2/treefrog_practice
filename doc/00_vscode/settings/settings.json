{
  // エディタ

  // フォントサイズをピクセル単位で制御します
  "editor.fontSize": 14,

  // ダーティファイルの自動保存を制御します。有効な値: 'off'、'afterDelay'、'onFocusChange' (エディターがフォーカスを失います)、'onWindowChange' (ウィンドウがフォーカスを失います)。'afterDelay' に設定すると、'files.autoSaveDelay' で遅延を構成できます
  "files.autoSave": "off",

  // タブサイズを変更するために必要。
  "editor.detectIndentation": false, 

  // 1 つのタブに相当するスペースの数。`editor.detectIndentation` がオンの場合、この設定はファイル コンテンツに基づいて上書きされます
  "editor.tabSize": 2,

  // エディターで空白文字を表示する方法を制御します。'none'、'boundary' および 'all' が使用可能です。'boundary' オプションでは、単語間の単一スペースは表示されません
  "editor.renderWhitespace": "all",

  // カーソルのスタイルを制御します。指定できる値は 'block'、'block-outline'、'line'、'line-thin'、'underline'、'underline-thin' です
  "editor.cursorStyle": "line",

  // Tab キーを押すとスペースが挿入されます。`editor.detectIndentation` がオンの場合、この設定はファイル コンテンツに基づいて上書きされます
  "editor.insertSpaces": true,

  // 行の折り返し方法を制御します。次の値を指定できます
  //  - 'off' (折り返さない),
  //  - 'on' (ビューポート折り返し),
  //  - 'wordWrapColumn' ('editor.wordWrapColumn' で折り返し) or
  //  - 'bounded' (ビューポートと 'editor.wordWrapColumn' の最小値で折り返し)
  "editor.wordWrap": "on",

  // 'editor.wordWrap' が 'wordWrapColumn' または 'bounded' の場合に、エディターの折り返し桁を制御します
  "editor.wordWrapColumn": 80,

  // 折り返し行のインデントを制御します。'none'、'same'、または 'indent' のいずれかを指定できます
  "editor.wrappingIndent": "same",

  // 言語に対するファイルの関連付け (例 "*.extension": "html") を構成します。これらの関連付けは、インストールされている言語の既定の関連付けより優先されます
  "files.associations": {},

  // プレフィックスが一致する場合にスニペットを挿入します。'quickSuggestions' が無効な場合に最適です
  "editor.tabCompletion": false,

  // 入力中に候補を自動的に表示するかどうかを制御します
  "editor.quickSuggestions": {
    "other": true,
    "comments": false,
    "strings": true
  },

  // クイック候補が表示されるまでの待ち時間 (ミリ秒) を制御します
  "editor.quickSuggestionsDelay": 10,

  // 'Tab' キーに加えて 'Enter' キーで候補を受け入れるかどうかを制御します。改行の挿入や候補の反映の間であいまいさを解消するのに役立ちます
  "editor.acceptSuggestionOnEnter": true,

  // コミット文字で候補を受け入れるかどうかを制御します。たとえば、JavaScript ではセミコロン (';') をコミット文字にして、候補を受け入れてその文字を入力することができます
  "editor.acceptSuggestionOnCommitCharacter": false,

  // 他の修正候補と一緒にスニペットを表示するかどうか、およびその並び替えの方法を制御します
  "editor.snippetSuggestions": "bottom",

  // ファイルを保存するときにフォーマットしてください。フォーマッタを使用可能にして、ファイルを自動保存せず、エディターをシャットダウンしないでください
  "editor.formatOnSave": false,

  // フォント ファミリを制御します
  //"editor.fontFamily": "Consolas, 'Courier New', monospace",

  // フォントの太さを制御します
  "editor.fontWeight": "normal",

  // 行の高さを制御します。fontSize に基づいて lineHeight を計算する場合には、0 を使用します
  "editor.lineHeight": 0,

  // 行番号の表示を制御します。使用可能な値は、'on'、'off'、および 'relative' です。'relative' は現在のカーソル位置からの行数を示します
  "editor.lineNumbers": "on",

  // 垂直ルーラーを表示する列
  "editor.rulers": [],

  // 選択範囲の角を丸くするかどうかを制御します
  "editor.roundedSelection": true,

  // エディターで最後の行を越えてスクロールするかどうかを制御します
  "editor.scrollBeyondLastLine": false,

  // マウス ホイール スクロール イベントの `deltaX` と `deltaY` で使用される乗数
  "editor.mouseWheelScrollSensitivity": 1,

  // ミニマップを表示するかどうかを制御します
  "editor.minimap.enabled": true,

  // 表示するミニマップの最大幅を特定の桁数に制限します(最大120)
  "editor.minimap.maxColumn": 120,

  // ミニマップスライダーを制御します
  "editor.minimap.showSlider": "always",

  // 行に (カラー ブロックではなく) 実際の文字を表示します
  "editor.minimap.renderCharacters": true,

  // パラメーター ヒントを有効にする
  "editor.parameterHints": true,

  // エディターで左角かっこの後に自動的に右角かっこを挿入するかどうかを制御します
  "editor.autoClosingBrackets": true,

  // エディターで入力後に自動的に行の書式設定を行うかどうかを制御します
  "editor.formatOnType": false,

  // 貼り付けた内容がエディターにより自動的にフォーマットされるかどうかを制御します。フォーマッタを使用可能にする必要があります。また、フォーマッタがドキュメント内の範囲をフォーマットできなければなりません
  "editor.formatOnPaste": false,

  // トリガー文字の入力時に候補が自動的に表示されるようにするかどうかを制御します
  "editor.suggestOnTriggerCharacters": true,

  // 選択範囲を指定しないでコピーする場合に現在の行をコピーするかどうかを制御します
  "editor.emptySelectionClipboard": true,

  // ドキュメント内の単語に基づいて入力候補を計算するかどうかを制御します
  "editor.wordBasedSuggestions": true,

  // 候補のウィジェットのフォント サイズ
  "editor.suggestFontSize": 0,

  // 候補のウィジェットの行の高さ
  "editor.suggestLineHeight": 0,

  // エディターで選択範囲に類似する一致箇所を強調表示するかどうかを制御します
  "editor.selectionHighlight": true,

  // エディターでセマンティック シンボルの出現箇所を強調表示するかどうかを制御します
  "editor.occurrencesHighlight": true,

  // 概要ルーラーの同じ位置に表示できる装飾の数を制御します
  "editor.overviewRulerLanes": 3,

  // 概要ルーラーの周囲に境界線が描画されるかどうかを制御します
  "editor.overviewRulerBorder": true,

  // カーソルのアニメーション スタイルを制御します。指定できる値は 'blink'、'smooth'、'phase'、'expand'、'solid' です
  "editor.cursorBlinking": "blink",

  // Ctrl キーを押しながらマウス ホイールを使用してエディターのフォントをズームします
  "editor.mouseWheelZoom": false,

  // フォントの合字を使用します
  "editor.fontLigatures": false,

  // 概要ルーラーでカーソルを非表示にするかどうかを制御します
  "editor.hideCursorInOverviewRuler": false,

  // エディターで制御文字を表示する必要があるかどうかを制御します
  "editor.renderControlCharacters": false,

  // エディターでインデントのガイドを表示する必要があるかどうかを制御します
  "editor.renderIndentGuides": false,

  // エディターが現在の行をどのように強調表示するかを制御します。考えられる値は 'none'、'gutter'、'line'、'all' です
  "editor.renderLineHighlight": "line",

  // エディターでコード レンズを表示するかをどうかを制御する
  "editor.codeLens": true,

  // エディターでコードの折りたたみを有効にするかどうかを制御します
  "editor.folding": true,

  // かっこを選択すると、対応するかっこを強調表示します
  "editor.matchBrackets": true,

  // エディターで縦のグリフ余白が表示されるかどうかを制御します。ほとんどの場合、グリフ余白はデバッグに使用されます
  "editor.glyphMargin": true,

  // 空白の挿入や削除はタブ位置に従って行われます
  "editor.useTabStops": true,

  // 自動挿入された末尾の空白を削除する
  "editor.trimAutoWhitespace": true,

  // エディターのコンテンツをダブルクリックするか、Esc キーを押しても、ピーク エディターを開いたままにします
  "editor.stablePeek": false,

  // ドラッグ アンド ドロップによる選択範囲の移動をエディターが許可する必要があるかどうかを制御します
  "editor.dragAndDrop": false,

  // 差分エディターが差分を横に並べて表示するか、行内に表示するかを制御します
  "diffEditor.renderSideBySide": true,

  // 差分エディターが、先頭または末尾の空白の変更を差分として表示するかどうかを制御します
  "diffEditor.ignoreTrimWhitespace": true,

  // 差分エディターが追加/削除された変更に +/- インジケーターを示すかどうかを制御します
  "diffEditor.renderIndicators": true,

  // ワークベンチ

  // 有効にすると、起動時にウェルカム ページを表示します
  "workbench.welcome.enabled": false,

  // 開いているエディターをタブに表示するかどうかを制御します
  "workbench.editor.showTabs": true,

  // エディター タブの閉じるボタンの位置を制御するか、[off] に設定した場合に無効にします
  "workbench.editor.tabCloseButton": "right",

  // 開いているエディターをアイコンで表示するかどうかを制御します。これには、アイコンのテーマを有効にする必要もあります
  "workbench.editor.showIcons": true,


  // 開いているエディターをプレビューとして表示するかどうかを制御します。プレビュー エディターは、保持されている間、再利用されます (ダブルクリックまたは編集などによって)
  "workbench.editor.enablePreview": true,

  // Quick Open で開いたエディターをプレビューとして表示するかどうかを制御します。プレビュー エディターは、保持されている間、再利用されます (ダブルクリックまたは編集などによって)
  "workbench.editor.enablePreviewFromQuickOpen": true,

  // エディターを開く場所を制御します。[左] または [右] を選択して、現在アクティブになっているエディターの左または右にエディターを開きます。[最初] または [最後] を選択して、現在アクティブになっているエディターとは別個にエディターを開きます
  "workbench.editor.openPositioning": "right",

  // 任意の表示グループが開かれた場合に、そこにエディターを表示するかどうかを制御します。無効にした場合、エディターは現在のアクティブなエディター グループに優先して開かれます。有効にした場合は、現在のアクティブなエディター グループにもう一度開くのではなく、既に開いているエディターが表示されます。特定のグループ内や現在アクティブなグループの横に強制的にエディターを開いた場合などに、この設定が無視される場合もあることにご注意ください
  "workbench.editor.revealIfOpen": false,

  // フォーカスを失ったときに Quick Open を自動的に閉じるかどうかを制御します
  "workbench.quickOpen.closeOnFocusLost": true,

  // 設定を開くとすべての既定の設定を表示するエディターも開くかどうかを制御します
  "workbench.settings.openDefaultSettings": true,

  // サイド バーの位置を制御します。ワークベンチの左右のいずれかに表示できます
  "workbench.sideBar.location": "left",

  // ワークベンチの下部にステータス バーを表示するかどうかを制御します
  "workbench.statusBar.visible": true,

  // ワークベンチでのアクティビティ バーの表示をコントロールします
  "workbench.activityBar.visible": true,

  // ファイルを表示しているエディターを、ファイルが削除されるかその他のプロセスによって名前を変更された場合に、自動的に閉じるかどうかを制御します。これを無効にすると、このような場合にエディターはダーティで開かれたままになります。アプリケーション内で削除すると、必ずエディターは閉じられ、ダーティ ファイルは閉じられることがなく、データは保存されませんのでご注意ください
  "workbench.editor.closeOnFileDelete": true,

  // 有効にすると、エディターを 1 つも開いていないときに透かしのヒントが表示されます
  "workbench.tips.enabled": true,

  // Specifies the color theme used in the workbench.
  "workbench.colorTheme": "Default Dark+",

  // Specifies the icon theme used in the workbench.
  "workbench.iconTheme": null,

  // 現在選択している配色テーマで配色を上書きします
  "workbench.colorCustomizations": {},

  // ウィンドウ
  // ファイルを新しいウィンドウで開くかどうかを制御します
  // - default: ファイルのフォルダーが開かれていたウィンドウでファイルを開くか、Dock または Finder を使用して開く場合以外は最後のアクティブ ウィンドウでファイルを開きます (macOS のみ
  // - on: 新しいウィンドウでファイルを開きます
  // - off: ファイルのフォルダーが開かれていたウィンドウまたは最後のアクティブ ウィンドウでファイルを開きます
  // この設定は無視される場合もあります (-new-window または -reuse-window コマンド ライン オプションを使用する場合など)
  "window.openFilesInNewWindow": "default",

  // フォルダーを新しいウィンドウで開くか、最後のアクティブ ウィンドウで開くかを制御します
  // - default: アプリケーション内で ([ファイル] メニューなどから) 選択したものでなければ、新しいウィンドウでフォルダーを開く
  // - on: 新しいウィンドウでフォルダーを開く
  // - off: 最後のアクティブ ウィンドウでフォルダーを開く
  // この設定は無視される場合もあります (-new-window または -reuse-window コマンド ライン オプションを使用する場合など)
  "window.openFoldersInNewWindow": "default",

  // 再起動後にフォルダーを再度開く方法を制御します。'none' を選択するとフォルダーを再度開くことはありません。'one' を選択すると最後に作業したフォルダーを再度開きます。'all' を選択すると前回のセッションのフォルダーすべてを再度開きます
  "window.reopenFolders": "one",

  // 全画面表示モードで終了した場合に、ウィンドウを全画面表示モードに復元するかどうかを制御します
  "window.restoreFullscreen": false,

  // ウィンドウのズーム レベルを調整します。元のサイズは 0 で、1 つ上げるごとに (1 など) 20% ずつ拡大することを表し、1 つ下げるごとに (-1 など) 20% ずつ縮小することを表します。小数点以下の桁数を入力して、さらに細かくズーム レベルを調整することもできます
  "window.zoomLevel": 0,

  // アクティブなエディターに基づいてウィンドウのタイトルを制御します。変数は、コンテキストに基づいて置換されます
  // ${activeEditorShort}: 例:  myFile.txt
  // ${activeEditorMedium}: 例: myFolder/myFile.txt
  // ${activeEditorLong}: 例: /Users/Development/myProject/myFolder/myFile.txt
  // ${rootName}: 例:  myProject
  // ${rootPath}: 例:  /Users/Development/myProject
  // ${appName}: 例:  VS Code
  // ${dirty}: アクティブなエディターがダーティである場合のダーティ インジケーター
  // ${separator}: 値のある変数で囲まれた場合にのみ表示される条件付き区切り記号 (" - ")
  "window.title": "${dirty}${activeEditorShort}${separator}${rootName}${separator}${appName}",

  // 新しいウィンドウを開くときのサイズを制御します。既定では、新しいウィンドウは画面の中央に小さいサイズで開きます。'inherit' に設定すると、最後のアクティブ ウィンドウと同じサイズで開きます。'maximized' に設定するとウィンドウは最大サイズで開き、'fullscreen' に設定すると全画面になります
  "window.newWindowDimensions": "default",

  // メニュー バーの表示/非表示を制御します。'切り替え' 設定は Alt キーを 1 回押すとメニュー バーの表示/非表示が切り替わることを意味します。既定では、ウィンドウが全画面表示の場合を除き、メニュー バーは表示されます
  "window.menuBarVisibility": "default",

  // 有効にすると、Windows でハイ コントラスト テーマが使用されている場合にはハイ コントラスト テーマに自動的に変更され、Windows のハイ コントラスト テーマから切り替えられている場合にはダーク テーマに自動的に変更されます
  "window.autoDetectHighContrast": true,

  // ファイル

  // ファイルとフォルダーを除外するための glob パターンを構成します
  "files.exclude": {
    "**/.git": true,
    "**/.svn": true,
    "**/.hg": true,
    "**/CVS": true,
    "**/.DS_Store": true
  },

  // 言語に対するファイルの関連付け (例 "*.extension": "html") を構成します。これらの関連付けは、インストールされている言語の既定の関連付けより優先されます
  "files.associations": {},

  // ファイルの読み取り/書き込みで使用する既定の文字セット エンコーディング
  "files.encoding": "utf8",

  // 有効な場合、ファイルを開くときに文字セット エンコードを推測します
  "files.autoGuessEncoding": false,

  // 既定の改行文字。
  //"files.eol": "\r\n",
  "files.eol": "\n",

  // 有効にすると、ファイルの保存時に末尾の空白をトリミングします
  "files.trimTrailingWhitespace": false,

  // 有効にすると、ファイルの保存時に最新の行を末尾に挿入します
  "files.insertFinalNewline": false,

  // ダーティ ファイルの自動保存を制御します。有効な値: 'off'、'afterDelay'、'onFocusChange' (エディターがフォーカスを失います)、'onWindowChange' (ウィンドウがフォーカスを失います)。'afterDelay' に設定すると、'files.autoSaveDelay' で遅延を構成できます
  "files.autoSave": "off",

  // ダーティ ファイルの自動保存の遅延をミリ秒単位で制御します。'files.autoSave' が 'afterDelay' に設定されている場合のみ適用されます
  "files.autoSaveDelay": 1000,

  // ファイル モニタリングから除外するファイル パスの glob パターンを構成します。この設定を変更すると、再起動が必要になります。始動時に Code が消費する CPU 時間が多い場合は、大規模なフォルダーを除外して初期ロードを減らせます
  "files.watcherExclude": {
    "**/.git/objects/**": true,
    "**/node_modules/**": true
  },

  // エディターを終了するときに保存を確認するダイアログを省略し、保存されていないファイルをセッション後も保持するかどうかを制御します
  "files.hotExit": "onExit",

  // 新しいファイルに割り当てられる既定の言語モード
  "files.defaultLanguage": "",

  // エクスプローラー (4) 
  
  // [開いているエディター] ウィンドウに表示されているエディターの数。0 に設定するとウィンドウが非表示になります
  "explorer.openEditors.visible": 9,

  // 開いているエディターのセクションの高さを要素の数に合わせて動的に調整するかどうかを制御します
  "explorer.openEditors.dynamicHeight": true,

  // エクスプローラーでファイルを開くとき、自動的にファイルの内容を表示して選択するかどうかを制御します
  "explorer.autoReveal": true,

  // ドラッグ アンド ドロップを使用したファイルとフォルダーの移動をエクスプローラーが許可するかどうかを制御します
  "explorer.enableDragAndDrop": true,

  // 検索

  // 検索でファイルとフォルダーを除外するために glob パターンを構成します。files.exclude 設定からすべての glob パターンを継承します
  "search.exclude": {
    "**/node_modules": true,
    "**/bower_components": true
  },

  // テキスト検索で ripgrep を使用するかどうかを制御します
  "search.useRipgrep": true,

  // 新しいワークスペースで検索するときに、既定で .gitignore ファイルを使用するか .ignore ファイルを使用するかを制御します
  "search.useIgnoreFilesByDefault": false,

  // グローバル シンボル検索の結果を、Quick Open の結果ファイルに含めるように構成します
  "search.quickOpen.includeSymbols": false,


  // Emmet

  // これをオンにすると、TAB キーを押したときに emmet 省略記法が展開されます
  "emmet.triggerExpansionOnTab": true,

  // Emmet の一部のアクションやリゾルバーの動作の変更に使用される基本設定
  "emmet.preferences": {},

  // 指定した構文に対してプロファイルを定義するか、特定の規則がある独自のプロファイルをご使用ください
  "emmet.syntaxProfiles": {},

  // emmet 省略記法を展開すべきでない言語の配列
  "emmet.excludeLanguages": [
    "markdown"
  ],

  // Emmet のプロファイル、スニペット、基本設定を含むフォルダーへのパス
  "emmet.extensionsPath": null,
}
